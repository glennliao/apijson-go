// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// AccessDao is the data access object for table access.
type AccessDao struct {
	table   string        // table is the underlying table name of the DAO.
	group   string        // group is the database configuration group name of current DAO.
	columns AccessColumns // columns contains all the column names of Table for convenient usage.
}

// AccessColumns defines and stores column names for table access.
type AccessColumns struct {
	Id        string //
	Debug     string // 是否为调试表，只允许在开发环境使用，测试和线上环境禁用
	Name      string // 实际表名，例如 apijson_user
	Alias     string // 外部调用的表别名，例如 User
	Get       string // 允许 get 的角色列表，例如 ["LOGIN", "CONTACT", "CIRCLE", "OWNER"] 用 JSON 类型不能设置默认值，反正权限对应的需求是明确的，也不需要自动转 JSONArray。
	Head      string // 允许 head 的角色列表，例如 ["LOGIN", "CONTACT", "CIRCLE", "OWNER"]
	Gets      string // 允许 gets 的角色列表，例如 ["LOGIN", "CONTACT", "CIRCLE", "OWNER"]
	Heads     string // 允许 heads 的角色列表，例如 ["LOGIN", "CONTACT", "CIRCLE", "OWNER"]
	Post      string // 允许 post 的角色列表，例如 ["LOGIN", "CONTACT", "CIRCLE", "OWNER"]
	Put       string // 允许 put 的角色列表，例如 ["LOGIN", "CONTACT", "CIRCLE", "OWNER"]
	Delete    string // 允许 delete 的角色列表，例如 ["LOGIN", "CONTACT", "CIRCLE", "OWNER"]
	CreatedAt string // 创建时间
	Detail    string //
}

// accessColumns holds the columns for table access.
var accessColumns = AccessColumns{
	Id:        "id",
	Debug:     "debug",
	Name:      "name",
	Alias:     "alias",
	Get:       "get",
	Head:      "head",
	Gets:      "gets",
	Heads:     "heads",
	Post:      "post",
	Put:       "put",
	Delete:    "delete",
	CreatedAt: "created_at",
	Detail:    "detail",
}

// NewAccessDao creates and returns a new DAO object for table data access.
func NewAccessDao() *AccessDao {
	return &AccessDao{
		group:   "default",
		table:   "_access",
		columns: accessColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *AccessDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *AccessDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *AccessDao) Columns() AccessColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *AccessDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *AccessDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *AccessDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
